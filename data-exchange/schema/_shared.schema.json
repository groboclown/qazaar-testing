{
  "$schema": "https://json-schema.org/draft-07/schema",
  "title": "Shared Schema Definitions",
  "description": "Schema definitions shared between more than one document in this directory.",
  "$defs": {
    "Comment": {
      "title": "Author Comment",
      "description": "Document author comment text.",
      "type": "string",
      "minLength": 0,
      "maxLength": 4000
    },
    "CommentList": {
      "title": "Author Comment List",
      "description": "List of document author comments.",
      "type": "array",
      "minLength": 0,
      "maxLength": 100,
      "items": {"$ref": "#/$defs/Comment"}
    },
    "Schema": {
      "title": "Schema Version",
      "description": "Data exchange schema format.",
      "type": "string",
      "format": "url",
      "minLength": 6,
      "maxLength": 2000
    },
    "Id": {
      "title": "Unique Identifier",
      "description": "Unique identifying string for the item.  These should be ASCII alpha-numeric + simple separators.",
      "type": "string",
      "pattern": "^[a-zA-Z0-9_.,:;+$?/#%&*-]+$",
      "minLength": 1,
      "maxLength": 4000
    },
    "CommonDocumentSourceList": {
      "title": "Common Document Source List",
      "description": "Pool of document source references, which may be referenced from the source locations.",
      "type": "array",
      "minLength": 0,
      "maxLength": 4000,
      "items": {"$ref": "#/$defs/CommonDocumentSource"}
    },
    "CommonDocumentSource": {
      "title": "Common Document Source",
      "description": "A shared primary document reference.  Source locations can refer to this document through the identifier, but should also include an anchor.",
      "type": "object",
      "required": [
        "id",
        "rep",
        "loc"
      ],
      "additionalProperties": false,
      "properties": {
        "$comment": {"$ref": "#/$defs/Comment"},
        "$comments": {"$ref": "#/$defs/CommentList"},
        "id": {"$ref": "#/$defs/Id"},
        "rep": {
          "title": "Repository Category",
          "description": "General repository category containing the source.  This might be 'git' if stored in a Git repository, or 'aws-s3', if stored in an Amazon S3 key store, or 'intranet' if stored in an Intranet source.  The different programs may have their own requirements for this value.  It does not define a location within the repository, though.",
          "type": "string",
          "minLength": 1,
          "maxLength": 200
        },
        "loc": {
          "title": "Source Resource",
          "description": "The resource identifier within the 'repo'.  Depending on the repo type, this most likely has a required format for that repository.",
          "type": "string",
          "minLength": 1,
          "maxLength": 8000
        },
        "ver": {
          "title": "Version",
          "description": "An identifier to reference the unique version of the source, as dictated by the repository type.  This might a commit id, or document revision, or a date-time stamp.  The repository type may not have the ability to retrieve this version (someone may have deleted it, or the repository does not support versioning).",
          "type": "string",
          "minLength": 1,
          "maxLength": 200
        }
      }
    },
    "DocumentSources": {
      "title": "Document Sources",
      "description": "Sources that contained the original definitions.  A tool collected those descriptions into this document.",
      "type": "array",
      "minLength": 0,
      "maxLength": 4000,
      "items": {"$ref": "#/$defs/SourceLocation"}
    },
    "SourceLocation": {
      "title": "Source Location",
      "description": "Pointer to the location of the source.  Due to the prevalence of this object, property names use a truncated form to shrink file sizes.  The 'ref' points to a common document source identifier in the commonSourceRefs list.",
      "type": "object",
      "required": [
        "ref"
      ],
      "additionalProperties": false,
      "properties": {
        "$comment": {"$ref": "#/$defs/Comment"},
        "$comments": {"$ref": "#/$defs/CommentList"},
        "ref": {"$ref": "#/$defs/Id"},
        "a": {
          "title": "Anchor",
          "description": "A location within the source.  This depends upon the source type; it might be an HTML anchor tag, or a paragraph title, or a function name, or a line number, or an opcode index.",
          "type": "string",
          "minLength": 1,
          "maxLength": 4000
        }
      }
    },
    "Localized": {
      "title": "Localized Text",
      "description": "Text with localization capability.",
      "type": "object",
      "required": [
        "id",
        "message"
      ],
      "additionalProperties": false,
      "properties": {
        "$comment": {"$ref": "#/$defs/Comment"},
        "$comments": {"$ref": "#/$defs/CommentList"},
        "id": {"$ref": "#/$defs/Id"},
        "message": {
          "title": "Localized Message Catalog",
          "type": "array",
          "minLength": 1,
          "maxLength": 4000,
          "items": {
            "title": "Localized Message",
            "description": "The message text, localized.",
            "type": "object",
            "required": [
              "text",
              "locale"
            ],
            "additionalProperties": false,
            "properties": {
              "$comment": {"$ref": "#/$defs/Comment"},
              "$comments": {"$ref": "#/$defs/CommentList"},
              "text": {
                "type": "string",
                "minLength": 0,
                "maxLength": 4000
              },
              "locale": {
                "type": "string",
                "pattern": "^[a-zA-Z](-[a-zA-Z])?$",
                "minLength": 2,
                "maxLength": 20
              }
            }
          }
        },
        "when": {
          "title": "Localized Use Conditional",
          "description": "Conditional expression for when to use the localized message.  A single localization may have multiple messages depending on the parameter values.  For example, in English, it could use this conditional for selecting singular or plural text.",
          "type": "string",
          "minLength": 0,
          "maxLength": 4000
        },
        "parameters": {
          "title": "Message Parameters",
          "type": "array",
          "minLength": 0,
          "maxLength": 100,
          "items": {
            "title": "Message Parameter",
            "description": "Parameter to the message.",
            "type": "object",
            "required": [
              "name"
            ],
            "additionalProperties": false,
            "properties": {
              "$comment": {"$ref": "#/$defs/Comment"},
              "$comments": {"$ref": "#/$defs/CommentList"},
              "name": {"$ref": "#/$defs/Id"},
              "type": {
                "title": "Parameter Type",
                "description": "A type definition for the parameter.  While this has an open-ended value, implementations may have restrictions on allowed values.  If an implementation does not understand the type value, then it should ignore it or report a warning message, but not error out.",
                "type": "string",
                "minLength": 1,
                "maxLength": 200
              }
            }
          }
        }
      }
    }
  },

  "DescriptorKey": {
    "title": "Descriptor Key",
    "description": "Unique identifier for the descriptor.",
    "type": "string",
    "minLength": 1,
    "maxLength": 100
  },
  "DescriptorValue": {
    "oneOf": [
      {"$ref": "#/$defs/DescriptorNumericValue"},
      {"$ref": "#/$defs/DescriptorTextValue"}
    ]
  },
  "DescriptorNumericValue": {
    "title": "Descriptor Numeric Value",
    "description": "A numeric value.",
    "type": "number",
    "minimum": -1e+308,
    "maximum": 1e+308
  },
  "DescriptorTextValue": {
    "title": "Descriptor Text Value",
    "description": "A textual value, either an enumerated or free value.",
    "type": "string",
    "minLength": 0,
    "maxLength": 100000
  }
}
